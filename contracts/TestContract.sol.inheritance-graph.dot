digraph "" {
Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

SafeMath[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMath</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256,string)</TD></TR><TR><TD align="left">    mul(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256,string)</TD></TR><TR><TD align="left">    mod(uint256,uint256)</TD></TR><TR><TD align="left">    mod(uint256,uint256,string)</TD></TR></TABLE> >];

SafeMathInt[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMathInt</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    mul(int256,int256)</TD></TR><TR><TD align="left">    div(int256,int256)</TD></TR><TR><TD align="left">    sub(int256,int256)</TD></TR><TR><TD align="left">    add(int256,int256)</TD></TR><TR><TD align="left">    abs(int256)</TD></TR><TR><TD align="left">    toUint256Safe(int256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    MIN_INT256</TD></TR><TR><TD align="left">    MAX_INT256</TD></TR></TABLE> >];

SafeMathUint[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMathUint</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toInt256Safe(uint256)</TD></TR></TABLE> >];

IUniswapV2Factory[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Factory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    feeTo()</TD></TR><TR><TD align="left">    feeToSetter()</TD></TR><TR><TD align="left">    getPair(address,address)</TD></TR><TR><TD align="left">    allPairs(uint256)</TD></TR><TR><TD align="left">    allPairsLength()</TD></TR><TR><TD align="left">    createPair(address,address)</TD></TR><TR><TD align="left">    setFeeTo(address)</TD></TR><TR><TD align="left">    setFeeToSetter(address)</TD></TR></TABLE> >];

IUniswapV2Pair[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Pair</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    DOMAIN_SEPARATOR()</TD></TR><TR><TD align="left">    PERMIT_TYPEHASH()</TD></TR><TR><TD align="left">    nonces(address)</TD></TR><TR><TD align="left">    permit(address,address,uint256,uint256,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    MINIMUM_LIQUIDITY()</TD></TR><TR><TD align="left">    factory()</TD></TR><TR><TD align="left">    token0()</TD></TR><TR><TD align="left">    token1()</TD></TR><TR><TD align="left">    getReserves()</TD></TR><TR><TD align="left">    price0CumulativeLast()</TD></TR><TR><TD align="left">    price1CumulativeLast()</TD></TR><TR><TD align="left">    kLast()</TD></TR><TR><TD align="left">    mint(address)</TD></TR><TR><TD align="left">    burn(address)</TD></TR><TR><TD align="left">    swap(uint256,uint256,address,bytes)</TD></TR><TR><TD align="left">    skim(address)</TD></TR><TR><TD align="left">    sync()</TD></TR><TR><TD align="left">    initialize(address,address)</TD></TR></TABLE> >];

IUniswapV2Router01[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router01</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    factory()</TD></TR><TR><TD align="left">    WETH()</TD></TR><TR><TD align="left">    addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    addLiquidityETH(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    swapExactTokensForTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapTokensForExactTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactETHForTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapTokensForExactETH(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactTokensForETH(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapETHForExactTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    quote(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountOut(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountIn(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountsOut(uint256,address[])</TD></TR><TR><TD align="left">    getAmountsIn(uint256,address[])</TD></TR></TABLE> >];

IUniswapV2Router02 -> IUniswapV2Router01;
IUniswapV2Router02[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router02</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

IERC20Metadata -> IERC20;
IERC20Metadata[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Metadata</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

ERC20 -> Context [ label="1" ];
ERC20 -> IERC20 [ label="2" ];
ERC20 -> IERC20Metadata [ label="3" ];
ERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR></TABLE> >];

XTwitter -> ERC20 [ label="1" ];
XTwitter -> Ownable [ label="2" ];
XTwitter[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>XTwitter</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left">    claimStuckTokens(address)</TD></TR><TR><TD align="left">    excludeFromFees(address,bool)</TD></TR><TR><TD align="left">    isExcludedFromFees(address)</TD></TR><TR><TD align="left">    changeMarketingWallet(address)</TD></TR><TR><TD align="left">    enableTrading()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _transfer(address,address,uint256)</font></TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    marketingWallet</TD></TR><TR><TD align="left">    pinkLock</TD></TR><TR><TD align="left">    tradingEnabled</TD></TR><TR><TD align="left">    antiBotBlockAmount</TD></TR><TR><TD align="left">    antiBotBlockEnd</TD></TR><TR><TD align="left">    uniswapV2Router<font color="blue" POINT-SIZE="10"> (IUniswapV2Router02)</font></TD></TR><TR><TD align="left">    uniswapV2Pair</TD></TR><TR><TD align="left">    swapTokensAtAmount</TD></TR><TR><TD align="left">    swapEnabled</TD></TR><TR><TD align="left">    automatedMarketMakerPairs</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    DEAD</TD></TR><TR><TD align="left">    swapping</TD></TR><TR><TD align="left">    _isExcludedFromFees</TD></TR></TABLE> >];

}